#!/bin/bash

# Function to create a new Flutter project and set up custom structure
setup_flutter_project() {
  # Prompt for project name
  read -p "🖌️ Enter the project name: " project_name

  # Prompt for template directory
  read -p "📂 Enter the path to the template directory: " template_dir

  # Prompt for bundle name
  read -p "🔖 Enter the bundle name (e.g., com.example.project): " bundle_name

  # Prompt for platforms (default to android and ios)
  read -p "📱 Enter the platforms (default: android,ios): " platforms
  if [ -z "$platforms" ]; then
    platforms="android,ios"
  fi

  # Step 1: Create a new Flutter project with specified platforms
  echo "🚀 Creating Flutter project..."
  flutter create --platforms=$platforms --org $bundle_name $project_name

  # Convert Windows path to Unix path format for Git Bash
  template_dir=$(echo $template_dir | sed 's/\\/\//g')

  # Step 2: Copy custom lib folder
  echo "🗂 Setting up custom structure..."
  rm -rf $project_name/lib
  cp -r "$template_dir/lib" "$project_name/"

  # Step 3: Copy assets folder
  cp -r "$template_dir/assets" "$project_name/"

  # Step 4: Replace pubspec.yaml file and update project name
  cp "$template_dir/pubspec.yaml" "$project_name/"
  sed -i "" "s/^name: .*/name: $project_name/" "$project_name/pubspec.yaml"

  # Step 5: Update import statements in all Dart files
  find $project_name/lib -type f -name '*.dart' -exec sed -i "" "s/import 'package:base_project_flutter\//import 'package:$project_name\//g" {} +

  # Step 6: Update export statements in export.dart files
  find $project_name/lib -type f -name 'export.dart' -exec sed -i "" "s/export 'package:base_project_flutter\//export 'package:$project_name\//g" {} +

  echo "🎉 Flutter project $project_name set up successfully!"
}

# Check if Flutter is installed
if ! command -v flutter &> /dev/null
then
  echo "❌ Flutter could not be found. Please install Flutter and try again."
  exit
fi

# Run the setup function
setup_flutter_project